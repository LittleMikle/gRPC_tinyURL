// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.2
// source: proto/proto.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// URLserviseClient is the client API for URLservise service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type URLserviseClient interface {
	CreateURL(ctx context.Context, in *FullURLRequest, opts ...grpc.CallOption) (*TinyURLResponse, error)
	GetURL(ctx context.Context, in *TinyURLRequest, opts ...grpc.CallOption) (*FullURLResponse, error)
}

type uRLserviseClient struct {
	cc grpc.ClientConnInterface
}

func NewURLserviseClient(cc grpc.ClientConnInterface) URLserviseClient {
	return &uRLserviseClient{cc}
}

func (c *uRLserviseClient) CreateURL(ctx context.Context, in *FullURLRequest, opts ...grpc.CallOption) (*TinyURLResponse, error) {
	out := new(TinyURLResponse)
	err := c.cc.Invoke(ctx, "/url_service.URLservise/CreateURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLserviseClient) GetURL(ctx context.Context, in *TinyURLRequest, opts ...grpc.CallOption) (*FullURLResponse, error) {
	out := new(FullURLResponse)
	err := c.cc.Invoke(ctx, "/url_service.URLservise/GetURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// URLserviseServer is the server API for URLservise service.
// All implementations must embed UnimplementedURLserviseServer
// for forward compatibility
type URLserviseServer interface {
	CreateURL(context.Context, *FullURLRequest) (*TinyURLResponse, error)
	GetURL(context.Context, *TinyURLRequest) (*FullURLResponse, error)
	mustEmbedUnimplementedURLserviseServer()
}

// UnimplementedURLserviseServer must be embedded to have forward compatible implementations.
type UnimplementedURLserviseServer struct {
}

func (UnimplementedURLserviseServer) CreateURL(context.Context, *FullURLRequest) (*TinyURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateURL not implemented")
}
func (UnimplementedURLserviseServer) GetURL(context.Context, *TinyURLRequest) (*FullURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURL not implemented")
}
func (UnimplementedURLserviseServer) mustEmbedUnimplementedURLserviseServer() {}

// UnsafeURLserviseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to URLserviseServer will
// result in compilation errors.
type UnsafeURLserviseServer interface {
	mustEmbedUnimplementedURLserviseServer()
}

func RegisterURLserviseServer(s grpc.ServiceRegistrar, srv URLserviseServer) {
	s.RegisterService(&URLservise_ServiceDesc, srv)
}

func _URLservise_CreateURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FullURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLserviseServer).CreateURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/url_service.URLservise/CreateURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLserviseServer).CreateURL(ctx, req.(*FullURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLservise_GetURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TinyURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLserviseServer).GetURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/url_service.URLservise/GetURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLserviseServer).GetURL(ctx, req.(*TinyURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// URLservise_ServiceDesc is the grpc.ServiceDesc for URLservise service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var URLservise_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "url_service.URLservise",
	HandlerType: (*URLserviseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateURL",
			Handler:    _URLservise_CreateURL_Handler,
		},
		{
			MethodName: "GetURL",
			Handler:    _URLservise_GetURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/proto.proto",
}
